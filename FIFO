`timescale 1ns / 1ps



module fifo(input clk, input rst,input reg w_en,input[7:0]data_in, input reg [7:0]wr_ptr, input reg [7:0]rd_ptr,input rd_en, output reg [7:0]data_out, output full,output empty);
reg [7:0]mem[7:0];


always@(posedge clk)
begin
if(rst)begin
wr_ptr <= 0;
rd_ptr <= 0;
data_out <= 0;
end
end
always@(posedge clk)
begin
if(w_en & !full)begin
mem[wr_ptr] <= data_in;
wr_ptr <= wr_ptr +1;
end
end
always@(posedge clk)begin
if(rd_en & !empty) begin
data_out <= mem[rd_ptr];
rd_ptr <= rd_ptr+1;
end
end
assign full = ((wr_ptr + 1'b1)==rd_ptr) ;
assign empty = (wr_ptr == rd_ptr); 
endmodule
